<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="Microsoft.CSharp.dll" #>
<#@ Assembly name="$(SolutionDir)packages\AmazedSaint.ElasticObject.1.2.0\lib\net40\AmazedSaint.Elastic.dll" #>
<#@ Import Namespace="System.Xml" #>
<#@ Import Namespace="System.Xml.Linq" #>
<#@ Import Namespace="AmazedSaint.Elastic" #>
<#@ Import Namespace="AmazedSaint.Elastic.Lib" #>
<#@ output extension=".cs" #>
/***************************************************************
*  Этот файл был сгенерирован.
*  Не пытайтесь его изменить - он будет перегенерирован заново.
*  Лучше измените файл Weapons.tt
***************************************************************/
using System;

namespace TestArea
{
<#
var model=FromFile("Weapons.xml");

foreach(var c in model["weapon"])  //get all classes
	WriteClass(c);
#>
}
<#+
// Create an elastic object
private dynamic FromFile(string file)
{
   var path= Host.ResolvePath(file);
   return XDocument.Load(path).Root.ToElastic();
}


private Type GetSettingType(string settingName)
{
	var type = typeof(string);
	if (char.IsUpper(settingName[1]))
	{
		switch (settingName[0])
		{
			case 'b':
				type = typeof(bool);
				break;
			case 'i':
				type = typeof(int);
				break;
		}
	}

	return type;
}

private void WriteType(Type type)
{
	#><#= type.Name #><#+
}
private void WriteValue(dynamic p)
{
	if (GetSettingType(p.name) == typeof(string))
	{
		#>"<#= p.value #>"<#+
	}
	else
	{
		#><#= p.value #><#+
	}
}
private void WriteName(string settingName)
{
	if (char.IsUpper(settingName[1]))
	{
		if (char.IsLower(settingName[0]))
		{
			#><#= settingName.Substring(1) #><#+
			return;
		}
	}
	#><#= settingName #><#+
}



// Write a class
private void WriteClass(dynamic c)
{ 
#>
	class <#= c.name #> : AWeapon
	{
<#+
		foreach(var p in c["property"])
			WriteProperty(p);
#>
	}

<#+
}



// Write a Property
private void WriteProperty(dynamic p)
{#>
		public override <#+ WriteType(GetSettingType(p.name)); #> <#+ WriteName(p.name); #> { get { return <#+ WriteValue(p); #>; } }

<#+
}
#>