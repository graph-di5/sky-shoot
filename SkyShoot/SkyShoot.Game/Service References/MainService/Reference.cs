//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.239
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SkyShoot.Game.MainService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.ISkyShootService")]
    public interface ISkyShootService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISkyShootService/Register", ReplyAction="http://tempuri.org/ISkyShootService/RegisterResponse")]
        bool Register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISkyShootService/Login", ReplyAction="http://tempuri.org/ISkyShootService/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISkyShootService/GetGameList", ReplyAction="http://tempuri.org/ISkyShootService/GetGameListResponse")]
        SkyShoot.Contracts.Session.GameDescription[] GetGameList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISkyShootService/CreateGame", ReplyAction="http://tempuri.org/ISkyShootService/CreateGameResponse")]
        bool CreateGame(SkyShoot.Contracts.Session.GameMode mode, int maxPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISkyShootService/JoinGame", ReplyAction="http://tempuri.org/ISkyShootService/JoinGameResponse")]
        bool JoinGame(SkyShoot.Contracts.Session.GameDescription game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISkyShootService/Move")]
        void Move(Microsoft.Xna.Framework.Vector2 direction);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISkyShootService/Shoot")]
        void Shoot(Microsoft.Xna.Framework.Vector2 direction);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISkyShootService/TakeBonus")]
        void TakeBonus(SkyShoot.Contracts.Bonuses.AObtainableDamageModifier bonus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISkyShootService/TakePerk", ReplyAction="http://tempuri.org/ISkyShootService/TakePerkResponse")]
        void TakePerk(SkyShoot.Contracts.Perks.Perk perk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISkyShootService/LeaveGame", ReplyAction="http://tempuri.org/ISkyShootService/LeaveGameResponse")]
        void LeaveGame();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISkyShootServiceChannel : SkyShoot.Game.MainService.ISkyShootService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SkyShootServiceClient : System.ServiceModel.ClientBase<SkyShoot.Game.MainService.ISkyShootService>, SkyShoot.Game.MainService.ISkyShootService {
        
        public SkyShootServiceClient() {
        }
        
        public SkyShootServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SkyShootServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SkyShootServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SkyShootServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(string username, string password) {
            return base.Channel.Register(username, password);
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public SkyShoot.Contracts.Session.GameDescription[] GetGameList() {
            return base.Channel.GetGameList();
        }
        
        public bool CreateGame(SkyShoot.Contracts.Session.GameMode mode, int maxPlayers) {
            return base.Channel.CreateGame(mode, maxPlayers);
        }
        
        public bool JoinGame(SkyShoot.Contracts.Session.GameDescription game) {
            return base.Channel.JoinGame(game);
        }
        
        public void Move(Microsoft.Xna.Framework.Vector2 direction) {
            base.Channel.Move(direction);
        }
        
        public void Shoot(Microsoft.Xna.Framework.Vector2 direction) {
            base.Channel.Shoot(direction);
        }
        
        public void TakeBonus(SkyShoot.Contracts.Bonuses.AObtainableDamageModifier bonus) {
            base.Channel.TakeBonus(bonus);
        }
        
        public void TakePerk(SkyShoot.Contracts.Perks.Perk perk) {
            base.Channel.TakePerk(perk);
        }
        
        public void LeaveGame() {
            base.Channel.LeaveGame();
        }
    }
}
