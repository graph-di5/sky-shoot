using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using SkyShoot.Contracts.Session;
using SkyShoot.Contracts.Service;

namespace SkyShoot.WinFormsClient
{
	public partial class GameManagerForm : Form
	{
		#region переменные
		ISkyShootService _service;
		GameDescription[] _list;
		GameDescription _activeGame;
		#endregion

		#region
		#endregion

		enum Modes
		{
 			Choosing,
			Created,
			Joined
		}
		Modes _mode;
		Modes Mode 
		{get {return _mode;}
			set
			{
				switch (value)
				{
 					case Modes.Choosing:
						btCreate.Enabled = true;
						btRefresh.Enabled = true;
						btJoin.Enabled = (_activeGame != null);
						btLeave.Enabled = false;
						lstbGames.Enabled = true;
						break;
					case Modes.Created:
					case Modes.Joined:
						btCreate.Enabled = false;
						btRefresh.Enabled = false;
						btJoin.Enabled = false;
						btLeave.Enabled = true;
						lstbGames.Enabled = false;
						break;
				}
				_mode = value;
				lblStatus.Text = _mode.ToString();
			}
		}

		public GameManagerForm(ISkyShootService service)
		{
			_service = service;
			InitializeComponent();
		}

		private void Refresh_Click(object sender, EventArgs e)
		{
			_list = _service.GetGameList();
			lstbGames.Items.Clear();
			foreach(var i in _list)
			{
				lstbGames.Items.Add(i);
			}
		}

		private void GameManagerForm_Load(object sender, EventArgs e)
		{
			Mode = Modes.Choosing;
			Refresh_Click(sender, e);
		}

		private void btCreate_Click(object sender, EventArgs e)
		{
			_service.CreateGame(GameMode.Coop, 1, TileSet.Grass);
//				if (_service.CreateGame(GameMode.Coop, 1) != null)
			{
				Mode = Modes.Created;
			}
			//else
			{
				// TODO error reporting
			}
		}

		private void lstbGames_SelectedIndexChanged(object sender, EventArgs e)
		{
			_activeGame = (sender as ListBox).SelectedItem as GameDescription;
			if (_activeGame == null)
				return;
			lstbPlayers.Items.Clear();
			foreach (var name in _activeGame.Players)
			{
				lstbPlayers.Items.Add(name);
			}
			Mode = Modes.Choosing;
		}

		private void btLeave_Click(object sender, EventArgs e)
		{
			_service.LeaveGame();
			lstbGames.ClearSelected();
			Refresh_Click(sender, e);
			_activeGame = null;
			Mode = Modes.Choosing;
		}

		private void btJoin_Click(object sender, EventArgs e)
		{
			if (_activeGame != null)
			{
				_service.JoinGame(_activeGame);
				Refresh_Click(sender, e);
				Mode = Modes.Joined;
			}
		}
	}
}
